import "io"

link "SDL2"
link "SDL2_image"

extern fn SDL_Init() int
extern fn SDL_Quit() int
extern fn SDL_CreateWindow(char *, int, int, int, int, int) void*
extern fn SDL_DestroyWindow(void *) int
extern fn SDL_Delay(int) int
extern fn SDL_GetWindowSurface(void *) SDL_Surface*
extern fn SDL_FreeSurface(SDL_Surface *)
extern fn SDL_FillRect(SDL_Surface *, SDL_Rect*, int) int
extern fn SDL_MapRGB(SDL_PixelFormat*, char, char, char) int
extern fn SDL_UpdateWindowSurface(void *) int
extern fn SDL_PollEvent(SDL_Event *) int
extern fn SDL_LoadBMP_RW(void *, int) SDL_Surface*

//extern fn SDL_BlitSurface(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *) int

//Internal
extern fn SDL_RWFromFile(char *, char *) void*
extern fn SDL_UpperBlit(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *) int

struct SDL_Rect volatile {
	int x
	int y
	int w
	int h
}

struct SDL_PixelFormat volatile {
	int format
	void *palette
	char BitsPerPixel
	char BytesPerPixel
	char padding1
	char padding2
	int Rmask
	int Gmask
	int Bmask
	int Amask
	char Rloss
	char Gloss
	char Bloss
	char Aloss
	char Rshift
	char Gshift
	char Bshift
	char Ashift
	int refcount
	SDL_PixelFormat *next
}

struct SDL_Surface volatile {
	int flags
	SDL_PixelFormat *format
	int w
	int h
	void *pixels
	void *userdata
	int locked
	void *lock_data
	SDL_Rect clip_rect
	void *map
	int refcount
}

struct SDL_Event volatile {	//wip
	int type
	int dummyA
	int dummyB
	int dummyC
	int dummyD
	int dummyE
	int dummyF
	int dummyG
	int dummyH
    int dummyI
    int dummyJ
    int dummyK
    int dummyL
    int dummyM
}

fn SDL_LoadBMP(char *str) SDL_Surface* {
	var ops = SDL_RWFromFile(str, "rb")
	return SDL_LoadBMP_RW(ops, 1)
}

extern fn exit(int) int

fn main() {
	var bmp = SDL_LoadBMP("image.bmp")

	if bmp == <SDL_Surface*>0 {
		printf("Could not open image!\n")
		exit(0)
	}

	SDL_Init()
	void *window = SDL_CreateWindow("ghoul demo", 0, 0, 800, 600, 0)

	printf("Getting surface...\n")
	SDL_Surface *surface = SDL_GetWindowSurface(window)
	printf("Got surface!\n")

	//printf("Creating mapping...\n")
	//int mapping = SDL_MapRGB(surface.format, 255, 0, 0)
	//printf("Mapping created!\n")

	//SDL_FillRect(surface, <SDL_Rect*>0, mapping)

	SDL_UpperBlit(bmp, <SDL_Rect*>0, surface, <SDL_Rect*>0)

	SDL_Event ev
	int quitFlag = 256
	bool running = true

	while running {
		while SDL_PollEvent(*ev) {
			//exit loop
			if ev.type == quitFlag then running = false
		}
		SDL_UpdateWindowSurface(window)
		SDL_Delay(33)	//sleep for 33ms
	}

	printf("Exiting...\n")

	SDL_DestroyWindow(window)
	SDL_Quit()
}
