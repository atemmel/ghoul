import "io"
import "sdl"
import "os"

fn load([]*SDL_Surface* surfaces, []*char* strings) bool {
	//&surfaces <- SDL_LoadBMP("img/hero.bmp")
	//&surfaces <- SDL_LoadBMP("img/invader.bmp")
	for int i = 0; i < strings? ; i = i + 1 {
		surfaces[i] = SDL_LoadBMP(strings[i])
		if surfaces[i] == <SDL_Surface*>0 {
			printf("Could not load image: %s\n", strings[i] )
			return false
		}
	}
	return SDL_Init() == 0
}

fn cleanup([]*SDL_Surface* surfaces) {
	for int i = 0; i < surfaces? ; i = i + 1 {
		SDL_FreeSurface(surfaces[i])
	}
	SDL_Quit()
}

fn main() {
	var strings  = [2] char*
	var surfaces = [2] SDL_Surface*
	strings[0] = "img/hero.bmp"
	strings[1] = "img/invader.bmp"

	if load(*surfaces, *strings) == false then die("Aborting...\n")

	int n_invaders = 11 * 5
	int windowW = 800
	int windowH = 600

	var window = SDL_CreateWindow("Invaders", 0, 0, windowW, windowH, 0)
	var windowSurface = SDL_GetWindowSurface(window)
	var invaders = [n_invaders] SDL_Rect
	SDL_Event event
	int quitFlag = 256
	bool running = true


	while running {
		while SDL_PollEvent(*event) {
			if event.type == quitFlag then running = false

			if event.type == 768 then printf("Keypress!\n")
		}

		updateInvaders(*invaders)


	}

	cleanup(*surfaces)

	~ strings
	~ surfaces
	~ invaders

	printf("Clean exit...\n")
}

fn updateInvaders([]*SDL_Rect invaders) {
	
}
